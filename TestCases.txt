Testing Cases for Paxos:

Test Case 1:
Env :
Replicas: 2
Leaders: 1
Acceptors:  3

Flow :
Replica0: Proposes request <client : 1, request :1, slot : 1>
Replica1: Proposes request <client : 2, request :1, slot : 1>
Decision : <client : 2, request :1, slot : 1>

Replica0: proposes again <client : 1, request :1, slot : 2>

$$
TX 2:Deposit$0$22 replica0:1000
TX 1:Deposit$0$11 replica1:10000

----------------------------------------------------------------------
Test Case 2:
Env :
Replicas: 2
Leaders: 1
Acceptors:  3

Flow :
Replica0: Proposes request <client : 1, request :0, slot : 1>
Decision : <client : 1, request :0, slot : 1>  sent to all Replicas
Replica1: Gets the client request after the decision. Do not propose the request as the decision is already there.

$$
TX 1:Deposit$0$11 replica1:5000

------------------------------------------------------------------------
Test Case 3:
Env :
Replicas: 2
Leaders: 1
Acceptors:  3

Flow :
Replica0: Proposes request <client : 2, request :1, slot : 1> ,<client : 1, request :1, slot : 2>
Replica1: Proposes request <client : 1, request :1, slot : 1>
(because it didnt receive any decision for this request yet thus decision for slot 4 is not yet in for the Replica 2)

Decision : <client : 1, request :1, slot : 1>
Decision : <client : 2, request :1, slot : 1> to slot 3.
Decision : <client : 1, request :1, slot : 2>

$$
TX 1:Deposit$1$20 replica1:5000
TX 2:Deposit$2$30 replica0:1000
## replica0=700
## Check Replica 1 ...it should get two decisions 2$30 for different slot numbers, but it performs only the first.

Replica 1 and 2 : Dont process again the same request <client : 2, request :2, slot : 2>
------------------------------------------------------------------------

Test Case 4:
Env :
Replicas: 2
Leaders: 2
Acceptors:  3

Flow :
Leader 1: Gets adopted by the acceptors
Leader 2: Gets adopted by the acceptors
Leader 1: Gets pre-empted by when sends commander
Leader 2: is able to send the decision


Testing Failure detection :


Changes in Congif.properties
failureDetection=TRUE
failureDetectionTimeout=1000

Test 1:
Env :
Replicas: 2
Leaders: 2
Acceptors:  3

Flow :

Leader 1 is the Master Leader
Leader 0 is monitoring Leader 1

Leader 1 dies.
Leader 0 time-out and acts as the leader.
Replicas send a request to both the leaders.
Leader 0 gets the values decided and sends decision to all

Cmds:
> TX 1:Withdraw$0$50
> KILL leader1
> TX 1:Withdraw$0$50

Test 2:
Env :
Replicas: 2
Leaders: 3
Acceptors:  3
Client requests :

Flow :

All the three leaders send the Phase one msg to all the three acceptors. Leader 0 and Leader 1 get  pre-empted with the ballot no of Leader 2.
Leader 2 is the Master Leader
Leader 0 is monitoring Leader 2
Leader 1 is monitoring Leader 2

Leader 1 dies: No change in the Leader 0 and 2
Leader 2 dies:
Leader 0 is the new Leader (sends a new Scout)

Cmds:
Config.properties: leader0=400(delay leader0 more than the rest of the leaders)
> TX 1:Withdraw$0$50
> KILL leader1
> KILL leader2
We don't need to show any cmd getting executed even the presence of Scouts and commanders in the logs of the new leader (in this case Leader 0 show that the 0 is not the new Current alive Leader).

Test 3:
Env :
Replicas: 2
Leaders: 3
Acceptors:  3

Flow :
All the three leaders send the Phase one msg to all the three acceptors. Leader 0 gets pre-empted with the ballot no of Leader 1. Leader 1 get  pre-empted with the ballot no of Leader 2.
Leader 2 is the Master Leader
Leader 1 is monitoring Leader 2
Leader 0 is monitoring Leader 1

Leader 2 dies:
Leader 1 dies:
Leader 0 is the Leader.

We don't need to show any cmd getting executed even the presence of Scouts and commanders in the logs of the new leader (in this case Leader 1 and then the Leader 0 show who is the current leader).

Cmds:
> TX 1:Withdraw$0$50
> KILL leader2
> KILL leader1
> TX 1:Withdraw$0$50


Test 4:
Env :
Replicas: 2
Leaders: 3
Acceptors:  3

Flow :
All the three leaders send the Phase one msg to all the three acceptors. Leader 0 gets pre-empted with the ballot no of Leader 1. Leader 1 get  pre-empted with the ballot no of Leader 2.
Leader 2 is the Master Leader
Leader 1 is monitoring Leader 2
Leader 0 is monitoring Leader 1

Leader 1 dies:
Leader 0 sends a scout again and gets pre-empted because the ballot of Leader 2 is of more weight.
Leader 0 monitors Leader 2

We don't need to show any cmd getting executed even the presence of Scouts should be enough to show who is the current leader.

Test 5:
Env :
Replicas: 2
Leaders: 2
Acceptors:  3

Flow :

Leader 1 is the Master Leader
Leader 0 is monitoring Leader 1

Leader 1 slows down.
Leader 0 time-out and acts as the leader.
Replica 1 sends a request to both the leaders.
Leader 1 gets pre-empted when it sends the commander and starts listening to Leader 0.
Leader 0 gets the values decided and sends decision to all

Test 6:
Env :
Replicas: 2
Leaders: 2
Acceptors:  3

Flow :

Leader 1 is the Master Leader
Leader 0 is monitoring Leader 1


Replica 0 sends a request <client : 1, request :2, slot : 2> to Leader 1 and not Leader 0.
Replica 1 sends a request <client : 3, request :1, slot : 2> to Leader 0 and not Leader 1.

Leader 1 gets Replica 0 msg accepted by Acceptor 0 and Acceptor 1.
Leader 1 dies before sending any msg to the Replica’s.
Leader 0 time-out and acts as the leader.
Leader 0 gets Request <client : 3, request :1, slot : 2> from Replica 1
Leader 0 should decide on the value : <client : 1, request :2, slot : 2> and send to both the replicas.
Replica 1 should propose the value <client : 3, request :1, slot : 2> again.

Test 7:
Env :
Replicas: 2
Leaders: 2
Acceptors:  3

Flow :
Leader 1 is the Master Leader
Leader 0 is monitoring Leader 1

Replica 0 sends a request <client : 1, request :2, slot : 2> to Leader 1 and not Leader 0.
Replica 1 sends a request <client : 3, request :1, slot : 2> to Leader 0 and not Leader 1.

Leader 1. gets one value accepted by Acceptor 0.
Leader 1 Slows down before sending any msg to acceptor 1 and acceptor 2.
Leader 0 timeouts and acts as the leader.
Leader 0 gets Request <client : 3, request :1, slot : 2> from Replica 1
Leader 0 gets the value : <client : 3, request :2, slot : 2> decided.
Replica 0 should propose the value <client : 1, request :1, slot : 2> again.

Test 8:
Env :
Replicas: 2
Leaders: 2
Acceptors:  3

Flow :
Leader 1 is the Master Leader
Leader 0 is monitoring Leader 1

Replica 0 sends a request <client : 1, request :2, slot : 2> to Leader 1 and not Leader 0.
Replica 1 sends a request <client : 3, request :1, slot : 2> to Leader 0 and not Leader 1.

Leader 1 gets one value accepted by Acceptor 0.
Leader 1 Slows down before sending any msg to Acceptor 1 and acceptor 2.
Leader 0 timeouts and acts as the leader.
Leader 0 gets Request <client : 3, request :1, slot : 2> from Replica 1 accepted by Acceptor’s
Leader 1 should decide on the value : <client : 3, request :2, slot : 2>


TO CHECK IF we need the functionality to test the messages begin sent by the commanders to the acceptors slow down the messages being sent individually to the acceptors